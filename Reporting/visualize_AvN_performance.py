#!/usr/bin/env python
# coding: utf-8

"""
AVN DATA COLLECTION AND PLOTTING TOOL
-------------------------------------

Created on Fri Sept 20 11:45:40 2019
@author: Niels Nicolaï; Jean-David Therrien

WITH THIS NOTEBOOK, ONE MAY:
* Extract data from a matlab file and convert it into a pandas DataFrame
* Query data from the datEAUbase that are relevant to the AvN project
* Collect data from the AvN controller file
* Generate plots describing the AvN controller performance over the span of the collected data

DEPENDENCIES:
To extract data from the dateaubase, the file Dateaubase.py must be present on the user's computer and the path to it must be known.
 A VPN connection to the datEAUbase server is also required.

THE FOLLOWING THIRD-PARTY PYTHON MODULES ARE ALSO NEEDED:
* numpy
* pandas
* plotly
* plotly-orca
* scipy

Copyright (c) 2019 modelEAU, Université Laval. All Rights Reserved.
"""

import pandas as pd
import numpy as np

import plotly.graph_objects as go
import plotly.io as pio
from plotly.subplots import make_subplots
pio.templates.default = 'plotly_white' #Set the default plot style for plotly
pio.renderers.default = 'browser' #Set the default renderer (jupyter or browser)

import datetime
import scipy.io
import sys

import os
import errno

#import functions to obtain data
datEAUbase_path = '../datEAU_win/datEAU_filtering'
sys.path.append(datEAUbase_path)
from connect_datEAUbase import *
from load_datEAUbase import *
from load_ANAPRO  import *
from load_control_files import *

#%% USER INPUT

#Define which reactor is needed (Pilote or Copilote)
reactor = 'Copilote'

#Define the period to be visualised
start_date = "29 October 2019"
end_date = "1 November 2019"

#Define the name and location of the files generated by the controller
files_ctrl = [] #['data/October/intermDataAvNCtrl_fAE_20191020.csv']

#Define the name and location of the files generated by the controller
file_lab = []

#Define the name of the output HTML file
file_HTML = 'AvNdata_Meeting_'+datetime.datetime.now().strftime('%y%m%d')+'_'+reactor+'.html'

#Specify default plot ranges
range_influent = []#[10, 50]
range_effluent = []#[0, 20]
range_AvN = [0, 5]
range_aeration = [0.0, 2.0]#[0.0, 2.00]
range_airflow = []#[0.0, 1000]

#%% DATA EXTRACTION

# Extract data from the datEAUbase
df_db = extract_AvN_from_db(start_date, end_date)

# Extract data from control files
if files_ctrl:
    # Extract data from the control files
    df_ctrl = get_ctrl_data(files_ctrl)
    # Bring the different data sources together
    df_db_ctrl = df_db.join(ctrl_df, how='outer')
else:
    df_db_ctrl = df_db
    
# Extract data from lab data files
if file_lab:
    # Extract data from the control files
    df_lab = pd.read_csv(files_lab, index_col='datetime')
    # Bring the different data sources together
    df_db_ctrl_lab = df_db_ctrl.join(df_lab, how='outer')
else:
    df_db_ctrl_lab = df_db_ctrl

df = df_db_ctrl_lab

# Calculate the NH4-N to NH3-N ratio for the Pilote and Copilote
df['Pilote ratio'] = df['Pilote effluent NH4-N']/df['Pilote effluent NO3-N']
df['Copilote ratio'] = df['Copilote effluent NH4-N']/df['Copilote effluent NO3-N']

# Correct the value of influent NH4 to get the right units
df['Primary settling tank effluent NH4-N'] /=1000

# Correct the value of the air flow rate to get the right units
df['Pilote reactor 4 Flowrate (Gas)'] *=60
df['Copilote reactor 4 Flowrate (Gas)'] *=60

# Round all values up to 2 values after the decimal
df = df.round(2)

#%% DATA VISUALISATION
# Use markers instead of line. Lines won't work because of all the NAN's created by the different time stamps.

fig = make_subplots(
    rows=5,
    cols=1,
    shared_xaxes=True,
    row_heights=[0.2, 0.4, 0.2, 0.2, 0.2],
    vertical_spacing=0.1,
    subplot_titles=(
        'Influent',
        'Effluent',
        'AvN ratio',
        'Aeration',
        'Air flow',
    ),
)

# Subplot 1 - Influent 
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df['Primary settling tank effluent NH4-N'],
        name = 'Influent NH4-N',
        mode='markers',
        legendgroup='leg1',
        marker=dict(
            color='rgb(153, 0, 0)',
            size=3,
        )
    ),
    row=1, col=1
)

if file_lab:  
    fig.add_trace(
        go.Scattergl(
            x=df.index,
            y=df['Lab Primary settling tank effluent NH4-N'],
            name = 'Lab influent NH4-N',
            mode='markers',
            legendgroup='leg1',
            marker=dict(
                color='rgb(102, 0, 0)',
                size=8,
                symbol='star-dot',
                line=dict(
                        width=1,
                        color='rgb(0,0,0)',
                )
            )
        ),
        row=1, col=1
    )

# Subplot 2 - Effluent
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df[reactor+' effluent NH4-N'],
        name = 'Effluent NH4-N',
        mode='markers',
        legendgroup='leg2',
        marker=dict(
            color='rgb(255, 0, 0)',
            size=3,
        )
    ),
    row=2, col=1
)

if file_lab:  
    fig.add_trace(
        go.Scattergl(
            x=df.index,
            y=df['Lab '+reactor+' effluent NH4-N'],
            name = 'Lab effluent NH4-N',
            mode='markers',
            legendgroup='leg2',
            marker=dict(
                color='rgb(255, 0, 0)',
                size=8,
                symbol='star-dot',
                line=dict(
                        width=1,
                        color='rgb(0,0,0)',
                )
            )
        ),
        row=2, col=1
    )
                
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df[reactor+' effluent NO3-N'],
        name = 'Effluent NO3-N',
        mode='markers',
        legendgroup='leg2',
        marker=dict(
            color='rgb(46, 184, 80)',
            size=3,
        )
    ),
    row=2, col=1
)
        
if file_lab:  
    fig.add_trace(
        go.Scattergl(
            x=df.index,
            y=df['Lab '+reactor+' effluent NO3-N'],
            name = 'Lab effluent NO3-N',
            mode='markers',
            legendgroup='leg2',
            marker=dict(
                color='rgb(46, 184, 80)',
                size=8,
                symbol='star-dot',
                line=dict(
                        width=1,
                        color='rgb(0,0,0)',
                )
            )
        ),
        row=2, col=1
    )

# Subplot 3 - AvN ratio
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=[1]*len(df.index),
        name = 'AvN setpoint',
        mode='lines',
        legendgroup='leg3',
        line=dict(
            color='rgb(0, 0, 0)',
            width=2,
            dash="dash",
            
        )
    ),
    row=3, col=1
)
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df[reactor+' ratio'],
        name = 'Ratio NH4-N/NO3-N',
        mode='markers',
        legendgroup='leg3',
        marker=dict(
            color='rgb(51, 102, 255)',
            size=3,
        )
    ),
    row=3, col=1
)

# Subplot 4 - Aeration
if files_ctrl:
    fig.add_trace(
        go.Scattergl(
            x=df.index,
            y=df['DOsp'],
            name = 'DO setpoint',
            mode='lines+markers',
            legendgroup='leg4',
            connectgaps=True,
            marker=dict(
                color='rgb(204, 51, 0)',
                size=3,
            ),
            line=dict(
                shape='hv'
            )
        ),
        row=4, col=1
    )

fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df[reactor+' reactor 4 DO'],
        name = 'DO tank 5',
        mode='lines+markers',
        legendgroup='leg4',
        opacity=0.5,
        marker=dict(
            color='rgb(255, 153, 0)',
            size=3,
        )
    ),
    row=4, col=1
)

# Subplot 5 - Air flow rate
fig.add_trace(
    go.Scattergl(
        x=df.index,
        y=df[reactor+' reactor 4 Flowrate (Gas)'],
        name = 'Air flow rate tank 5', #note that physically MFC 4 and 5 are switched
        mode='markers',
        legendgroup='leg5',
        connectgaps=True,
        marker=dict(
            color='rgb(213, 52, 235)',
            size=3,
        ),
    ),
    row=5, col=1
)

# Layout figure
showgrid=True
gridcolor = 'rgb(204, 204, 204)'
gridwidth=1

showline=True
linecolor='rgb(153, 153, 153)'
linewidth=2

fig.update_xaxes(
    showgrid=showgrid,
    gridwidth=gridwidth,
    gridcolor=gridcolor,
    showline=showline,
    linewidth=linewidth,
    linecolor=linecolor,
)
fig.update_yaxes(
    showgrid=showgrid,
    gridwidth=gridwidth,
    gridcolor=gridcolor,
    showline=showline,
    linewidth=linewidth,
    linecolor=linecolor,
)

fig.update_layout(
	# Change dimensions according to desired screen resolution
    height=925, #height=1030,
    width=1400, #width=1660,
    title_text="AvN performance: <b>"+reactor,
    legend_orientation="h",
    font=dict(size=13),
)

# Sbplot specific layouts
fig.update_yaxes(title_text="[mg/L]", title_font=dict(size=14), row=1, col=1)
fig.update_yaxes(title_text="[mg/L]", title_font=dict(size=14), row=2, col=1)
fig.update_yaxes(title_text="[-]", title_font=dict(size=14), row=3, col=1)
fig.update_yaxes(title_text="[mg/L]", title_font=dict(size=14), row=4, col=1)
fig.update_yaxes(title_text="[L/min]", title_font=dict(size=14), row=5, col=1)

# Adjust ranges if requested
if range_influent: fig.update_yaxes(range=range_influent, row=1, col=1)
if range_effluent: fig.update_yaxes(range=range_effluent, row=2, col=1)
if range_AvN: fig.update_yaxes(range=range_AvN, row=3, col=1)
if range_aeration: fig.update_yaxes(range=range_aeration, nticks=6, row=4, col=1)  
if range_airflow: fig.update_yaxes(range=range_airflow, row=5, col=1)

# Add the modelEAU logo
fig.layout.images = [dict(
        source="https://pbs.twimg.com/profile_images/723538279644147712/JnZh9k7P.jpg",
        xref="paper", yref="paper",
        x=0.9, y=-0.2,
        sizex=0.150, sizey=0.150,
        xanchor="left", yanchor="bottom"
      )]

# Add annotations to keep track of events
'''
fig.update_layout(
    annotations=[
        go.layout.Annotation(
            x="2019-09-03 10:30:00",
            y=40,
            xref="x1",↨
            yref="y1",
            text="Cleaning<br>NN<br>18.19%",
            showarrow=False,
            arrowhead=0,
            arrowcolor="rgb(153, 153, 153)",
            ax=0,
            ay=10,
            font = dict(size=9,color="rgb(153, 153, 153)"),
        )
    ],
)
'''

#Show figure in default renderer
fig.show()

#%% SAVE FIGURE AS A HTML FILE

filename = os.getcwd()+"\\HTML reports\\"+ datetime.datetime.now().strftime('%y%m%d') + "\\" + file_HTML
if not os.path.exists(os.path.dirname(filename)):
    try:
        os.makedirs(os.path.dirname(filename))
    except OSError as exc: # Guard against race condition
        if exc.errno != errno.EEXIST:
            raise

pio.write_html(fig, file=filename, auto_open=False)






